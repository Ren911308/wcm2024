<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理系統</title><link href="https://github.io/41223126/wcm2044/blog/" rel="alternate"></link><link href="https://github.io/41223126/wcm2044/blog/feeds/all.atom.xml" rel="self"></link><id>https://github.io/41223126/wcm2044/blog/</id><updated>2024-06-14T15:02:01+08:00</updated><entry><title>2024 W13 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w13.-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T12:45:00+08:00</published><updated>2024-06-14T15:02:01+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-06-14:/41223126/wcm2044/blog/2024-Spring-w13.-blog-tutorial.html</id><summary type="html">&lt;p&gt;網際內容管理第十三週課程，各組啟動並執行網際猜數字遊戲和有關可攜程式系統的批次檔案說明&lt;/p&gt;
</summary><content type="html">&lt;p&gt;網際內容管理第十三週課程，各組啟動並執行網際猜數字遊戲和有關可攜程式系統的批次檔案說明&lt;/p&gt;


&lt;h1&gt;各組啟動並執行網際猜數字遊戲&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=83g9NFbtR_k"&gt;影片&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;有關可攜程式系統的批次檔案說明&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=83g9NFbtR_k"&gt;影片&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;使用 SSH 客戶端遠端登入&lt;/h1&gt;
&lt;p&gt;學員需要一個 SSH 客戶端來連接到主機。以下是使用不同操作系統的簡單說明：&lt;/p&gt;
&lt;p&gt;Windows 可以使用 PuTTY 或 Windows Terminal。&lt;/p&gt;
&lt;p&gt;打開 PuTTY，輸入 stud.cycu.org 作為主機名，並輸入用戶名和初始密碼。&lt;/p&gt;
&lt;p&gt;macOS 和 Linux 打開終端（Terminal）&lt;/p&gt;
&lt;p&gt;輸入以下命令：&lt;/p&gt;
&lt;p&gt;ssh 學號@stud.cycu.org 例如，如果學號是 s1234567，則輸入：&lt;/p&gt;
&lt;p&gt;ssh s1234567@stud.cycu.org&lt;/p&gt;
&lt;h1&gt;修改初始密碼&lt;/h1&gt;
&lt;p&gt;首次登入後，應立即修改初始密碼。可以使用 passwd 命令來修改：&lt;/p&gt;
&lt;p&gt;passwd 系統會提示輸入當前密碼，然後輸入並確認新密碼&lt;/p&gt;
&lt;h1&gt;確保資料安全&lt;/h1&gt;
&lt;p&gt;提醒學員注意資料備份和安全：&lt;/p&gt;
&lt;p&gt;定期備份重要數據&lt;/p&gt;
&lt;p&gt;不要將敏感信息存儲在公共目錄中&lt;/p&gt;
&lt;p&gt;使用安全的密碼和兩步驗證（如有可能）&lt;/p&gt;</content><category term="w13"></category><category term="網誌編寫"></category></entry><entry><title>2024 W12 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w12.-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T11:45:00+08:00</published><updated>2024-06-14T14:51:15+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-06-14:/41223126/wcm2044/blog/2024-Spring-w12.-blog-tutorial.html</id><summary type="html">&lt;p&gt;網際內容管理第十二週課程,從單機猜數字遊戲與 AI 應用談起&lt;/p&gt;
</summary><content type="html">&lt;p&gt;網際內容管理第十二週課程,從單機猜數字遊戲與 AI 應用談起&lt;/p&gt;


&lt;h1&gt;先看看 Linux&lt;/h1&gt;
&lt;p&gt;在 Linux 設定全域 Proxy 伺服器的位置, 可以是 /etc/environment 檔案中的:&lt;/p&gt;
&lt;p&gt;http_proxy="http://your_proxy_server:port" https_proxy="http://your_proxy_server:port"&lt;/p&gt;
&lt;h1&gt;猜猜看遊戲&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://mde.tw/wcm2024/downloads/guess_game.7z"&gt;guess_game.7z&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是在 AI 輔助下, 將簡單的單人 Brython &lt;a href="https://mde.tw/wcm2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/aaced903b90465ed1718edb68e3d10a6/raw/cfce17938843e1f9a9be75d0cf2c2dee7c702291/guess_game.py"&gt;線上猜數字遊戲&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;轉化為可以多人同場比賽猜數字的線上遊戲.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://229.cycu.org:88/"&gt;http://229.cycu.org:88&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由於使用 Flask，直接啟動模式僅用於程式開發，若要部署在 Windows 或 Linux 電腦，還需進行下列考量:&lt;/p&gt;
&lt;p&gt;1.有沒有比較好的啟動模式?&lt;/p&gt;
&lt;p&gt;2.要如何使用 https? 有沒有必要?&lt;/p&gt;
&lt;p&gt;3.能不能透過電腦的服務執行猜數字遊戲?也就是隨著電腦開機後能直接自動執行?&lt;/p&gt;
&lt;p&gt;4.假如要配置使用者註冊制或儲存比賽資料，該使用哪一種資料庫? SQLite 就可以，需要使用 PostgreSQL&lt;/p&gt;
&lt;p&gt;5.一但部署成功，該如何設置網站的符號名稱&lt;/p&gt;
&lt;p&gt;最後，延伸以上的多人網際程式架構，是不是可以開發一個網際協同產品開發網站?&lt;/p&gt;
&lt;p&gt;在現今 AI 系統的輔助下，變得比較簡單&lt;/p&gt;
&lt;p&gt;後續猜數字遊戲的開發倉儲: &lt;a href="https://github.com/mdecycu/guess_game"&gt;https://github.com/mdecycu/guess_game&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;值得加入的功能:&lt;/p&gt;
&lt;p&gt;1.具有管理者模式, 可以重新啟動伺服器.&lt;/p&gt;
&lt;p&gt;2.可讓參賽者經由 Github、Gmail 或其他支援 Oauth2 登入協定的帳號登入.&lt;/p&gt;
&lt;p&gt;3.加入資料庫, 儲存參賽者的得分資料、歷史紀錄並提供排行榜等功能.&lt;/p&gt;
&lt;p&gt;4.加入其他可多人線上參與競技或進行同步對話功能, 或納入其他專業相關的協同設計功能.&lt;/p&gt;</content><category term="w12"></category><category term="網誌編寫"></category></entry><entry><title>2024 W11 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w11.-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T10:45:00+08:00</published><updated>2024-06-14T14:31:29+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-06-14:/41223126/wcm2044/blog/2024-Spring-w11.-blog-tutorial.html</id><summary type="html">&lt;p&gt;網際內容管理第十一週課程, 說明如何在網頁中加入 Brython 程式應用&lt;/p&gt;
</summary><content type="html">&lt;p&gt;網際內容管理第十一週課程, 說明如何在網頁中加入 Brython 程式應用&lt;/p&gt;


&lt;h1&gt;1a 評分倉儲&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/mdewcm2024/1astud-site"&gt;https://github.com/mdewcm2024/1astud-site&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mdewcm2024.github.io/1astud-site/content/index.html"&gt;https://mdewcm2024.github.io/1astud-site/content/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;有關 git pull 評分倉儲之後的處理要點&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=UgXZcpfSYXU"&gt;影片&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;各組員或各組先將改版資料推向個人或分組的倉儲分支後, 再與主分支的版本內容合併&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=UgXZcpfSYXU"&gt;影片&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;從教務主機直接擷取資料&lt;/h1&gt;
&lt;p&gt;利用 &lt;a href="https://mde.tw/wcm2024/downloads/wsgi_v1_py.txt"&gt;wsgi_v1.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以取得結果&lt;a href="https://mde.tw/wcm2024/downloads/wsgi_v1_output.txt"&gt;wsgi_v1_output.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;表示可以利用 Flask 建置網站程式取下教務主機中的相關資料.&lt;/p&gt;
&lt;p&gt;以下影片說明如何利用 wsgi_v2.py 擷取各學期班級課表:&lt;a href="https://www.youtube.com/watch?v=UgXZcpfSYXU"&gt;影片&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;說明如何將 Python 程式配置為 Windows 操作系統中的服務:&lt;a href="https://www.youtube.com/watch?v=UgXZcpfSYXU"&gt;影片&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;經由上述影片將程式配置在伺服器後, 可以從229 主機取下設一甲 90 學年度第一學期的課表&lt;/p&gt;
&lt;p&gt;利用&lt;a href="https://mde.tw/wcm2024/downloads/wsgi_v2_py.txt"&gt;wsgi_v2.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以取得以下結果:&lt;/p&gt;
&lt;h1&gt;完成品&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://ren911308.github.io/wcm2024/content/w13"&gt;完成品&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Brython程式環境&lt;/h1&gt;
&lt;p&gt;頁面 demo 在同一頁面下入多個線上 Ace 編輯器與執行按鈕 (practice_html.txt 動態頁面超文件).&lt;/p&gt;
&lt;p&gt;practice_html.txt 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.&lt;/p&gt;
&lt;p&gt;亦即將所有對應的 html 也使用 Brython 產生, 然後寫為&lt;a href="https://docs.python.org/3/tutorial/classes.html"&gt;class&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;後, 在範例導入時透過 &lt;a href="https://docs.python.org/3/tutorial/classes.html#instance-objects"&gt;instance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;引用&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;

window.onload=function(){

brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}

&lt;/script&gt;

&lt;p&gt;從 1 累加到 100:
將 iterable 與 iterator 相關說明, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;</content><category term="w11"></category><category term="網誌編寫"></category></entry><entry><title>2024 W10 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w10.-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T09:45:00+08:00</published><updated>2024-06-14T14:01:26+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-06-14:/41223126/wcm2044/blog/2024-Spring-w10.-blog-tutorial.html</id><summary type="html">&lt;p&gt;四技 WCM 第十週課程，用replit來維護新的分組倉儲&lt;/p&gt;
</summary><content type="html">&lt;p&gt;四技 WCM 第十週課程，用replit來維護新的分組倉儲&lt;/p&gt;


&lt;h1&gt;replit來維護新的分組倉儲&lt;/h1&gt;
&lt;p&gt;以replit來維護新的分組倉儲，需要應對問題為replit的.shh協定無法供免費使用者使用，已經透過github系統設定，現在可以直接在replit進行分組維護，replit目前只剩下對於使用者的&lt;a href="https://replit.com/usage"&gt;總資料儲存量(10G)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;限制
，當資源存取超過上限時，需要回到github下的對應倉儲帳號進行對應手段。&lt;/p&gt;
&lt;p&gt;新的分組專案網站：&lt;a href="https://github.com/mdewcm2024/1astud-site"&gt;https://github.com/mdewcm2024/1astud-site&lt;/a&gt;&lt;/p&gt;</content><category term="w10"></category><category term="網誌編寫"></category></entry><entry><title>2024 W9 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w9.-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T08:45:00+08:00</published><updated>2024-06-14T13:39:36+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-06-14:/41223126/wcm2044/blog/2024-Spring-w9.-blog-tutorial.html</id><summary type="html">&lt;p&gt;四技 WCM 第九週課程, 期中課程整理：網際內容管理(Web-based Content Management)&lt;/p&gt;
</summary><content type="html">&lt;p&gt;四技 WCM 第九週課程, 期中課程整理：網際內容管理(Web-based Content Management)&lt;/p&gt;


&lt;h1&gt;利用網頁來管理與個人或專業領域應用相關的內容&lt;/h1&gt;
&lt;p&gt;網際內容管理課程將網頁內容管理系統與網頁資料放在同一個倉儲中，只要有能夠執行 Python 的雲端或近端環境，開啟網頁編輯程式進行改版，上傳資料可在 Github 倉儲中透過 Pages 的全球資訊伺服器呈現網站內容&lt;/p&gt;
&lt;p&gt;本課管理系統採用 Python Flask 編寫，超文件的以 H 標註進行分頁外，還有elican 與 Reveal.js 等兩個延伸套件&lt;/p&gt;
&lt;p&gt;Pelican 可用來建立網誌， Reveal.js 則可用來建立網頁上的簡報資料&lt;/p&gt;</content><category term="w9"></category><category term="網誌編寫"></category></entry><entry><title>2024 W8 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w8.-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T07:45:00+08:00</published><updated>2024-06-14T13:31:25+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-06-14:/41223126/wcm2044/blog/2024-Spring-w8.-blog-tutorial.html</id><summary type="html">&lt;p&gt;四技 WCM 第八週課程, 從教育的本質看網際內容管理課程的內容要點.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;四技 WCM 第八週課程, 從教育的本質看網際內容管理課程的內容要點.&lt;/p&gt;


&lt;h1&gt;wcm2024 1a w8 從教育的本質看課程內容&lt;/h1&gt;
&lt;p&gt;介紹教育本質&lt;a href="https://www.youtube.com/watch?v=3XDoYSvsvOA"&gt;影片&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;wcm2024 1a w8 說明如何將影片嵌入網頁&lt;/h1&gt;
&lt;p&gt;將自己想上傳的影片內容先放到yt上，之後至自己的yt影片下，點擊分享，選擇第一個嵌入，將顯示在右側的超連結程式碼複製，來到動態編輯網站，點擊Source code(最下排笑臉右邊)，將複製的超連結內容貼上
完成&lt;a href="https://www.youtube.com/watch?v=3XDoYSvsvOA"&gt;影片&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;期中成績登記，並輸入自己想要的理想分數&lt;/h1&gt;
&lt;p&gt;60&lt;/p&gt;</content><category term="w8"></category><category term="網誌編寫"></category></entry><entry><title>2024 W6 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w6.-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T06:45:00+08:00</published><updated>2024-06-14T13:17:18+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-06-14:/41223126/wcm2044/blog/2024-Spring-w6.-blog-tutorial.html</id><summary type="html">&lt;p&gt;四技 WCM 第六週課程, 說明如何透過與 ChatGPT 的對話, 了解有關 git 在不同專業領域的應用方法.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;四技 WCM 第六週課程, 說明如何透過與 ChatGPT 的對話, 了解有關 git 在不同專業領域的應用方法.&lt;/p&gt;


&lt;h1&gt;Git的發展歷史&lt;/h1&gt;
&lt;p&gt;1.誕生背景： Git 是由 Linux 之父 Linus Torvalds 在 2005 年為了管理 Linux 內核開發而創建的。在那之前，Linux 內核團隊使用的是 BitKeeper，但由於許可議題，使得 Linux 社區需要一個新的版本控制系統&lt;/p&gt;
&lt;p&gt;2.誕生過程： Linus Torvalds開始尋找替代方案。他首先嘗試了 Monotone 和 Mercurial 等其他工具，但最終決定開發一個新的版本控制系統，這就是 Git&lt;/p&gt;
&lt;p&gt;3.首次發布： Git 的第一個版本於 2005 年 4 月釋出，並在Linux內核的開發中使用。從那時起，Git 迅速流行，成為許多開源項目和企業使用的首選版本控制系統之一&lt;/p&gt;
&lt;p&gt;4.社區發展： Git 很快吸引了一個活躍的社區，許多開發者貢獻了各種功能和改進。這些貢獻使得 Git 可以不斷演進和增強。&lt;/p&gt;
&lt;p&gt;5.GitHub 的興起： 2008 年，GitHub 這個基於 Git 的代碼託管平台成立。GitHub 的出現進一步推動了 Git 的普及和發展，成為了全球最大的代碼託管平台之一&lt;/p&gt;
&lt;p&gt;6.持續發展： 自 Git 誕生以來，它持續得到更新和改進。Git 社區和核心開發團隊不斷推出新的版本，添加新功能，優化性能，並修復漏洞&lt;/p&gt;
&lt;p&gt;7.應用範圍擴大： Git 不僅僅用於代碼版本控制，還廣泛應用於文檔管理、配置管理和各種其他領域。
總的來說，Git 的發展歷史展示了一個由開源社區推動的成功故事，它為開發者提供了一個強大而靈活的工具，用於有效管理代碼和協作開發&lt;/p&gt;
&lt;h1&gt;創作人的相關履歷&lt;/h1&gt;
&lt;p&gt;Git 的創造者是 Linux 核心的創建者 Linus Torvalds。他是一位芬蘭籍的計算機科學家，於 1991 年創建了 Linux 作業系統，並在開源社區中享有極高的聲譽
Linus Torvalds 出生於 1969 年 12 月 28 日，畢業於赫爾辛基大學，主修電腦科學。他在創建 Linux 核心的同時，也是 Git 版本控制系統的創建者和主要開發者
在他的職業生涯中，Torvalds 曾就職於 Transmeta Corporation 和 Open Source Development Labs。他的工作和貢獻使他成為了開源社區的一個重要人物，並且獲得了多項獎項和榮譽
Torvalds 以其開放、直率和自由的風格而聞名，他在維護 Linux 核心和 Git 項目的過程中始終堅持這一風格。他通過他的工作，為開源軟體的發展和普及做出了重大貢獻&lt;/p&gt;
&lt;h1&gt;Git常用指令&lt;/h1&gt;
&lt;p&gt;git add.  // 將所有修改的文件新增至暫存區//&lt;/p&gt;
&lt;p&gt;git commit -m "訊息字串" //提交暫存區的文件至本地儲存庫，並附上提交訊息//&lt;/p&gt;
&lt;p&gt;git push //推送本地儲存庫的提交至遠端儲存庫//&lt;/p&gt;
&lt;p&gt;git pull //拉取遠端儲存庫的更新//&lt;/p&gt;
&lt;p&gt;git version  //查看當前git的版本//&lt;/p&gt;
&lt;p&gt;git status//查看工作區和暫存區的狀態//&lt;/p&gt;
&lt;p&gt;git log//查看歷史提交紀錄//&lt;/p&gt;
&lt;p&gt;git clone [URL] [本地目錄]&lt;/p&gt;
&lt;h1&gt;利用Git 解決內容管理問題&lt;/h1&gt;
&lt;p&gt;對於相同專業的人士，如軟體開發人員、資料科學家或者內容創作者等，Git 是一個非常強大的工具，可以幫助他們有效地解決內容管理問題。以下是一般相同專業人士如何利用 Git 解決內容管理問題的一些方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;版本控制：Git 可以跟蹤文件的所有更改，包括新增、修改和刪除，並為每次更改創建一個獨特的版本號。這使得團隊成員可以隨時回溯到先前的版本，追蹤更改歷史，並在需要時回滾到特定版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;協作：Git 可以輕鬆實現多人協作，多人可以同時編輯文件而不會發生衝突。通過分支（branch）功能，每個人都可以在自己的分支上進行工作，完成後再合併到主分支或其他分支中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代碼審查：Git 通過提供 Pull Request（PR）功能，使得代碼審查變得更加方便和有效。團隊成員可以通過發送 PR 來邀請其他人檢查他們的代碼更改，並進行討論、提出建議或者進行修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;追蹤問題和解決方案：Git 可以與問題追蹤系統（如GitHub 的 Issue 或 GitLab 的問題追蹤）集成，使得團隊能夠更好地追蹤問題、錯誤和待解決的任務。通過在提交信息中引用問題號，可以輕鬆地將代碼更改與相應的問題關聯起來&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自動化流程：Git 可以與自動化工具（如持續集成/持續部署工具）集成，實現自動化測試、構建和部署流程。這樣可以提高開發效率，減少手動操作帶來的錯誤&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;總的來說，Git 提供了一個強大的框架，使得相同專業的人士可以更好地協作、管理內容，並有效地解決問題。通過學習和掌握 Git 的基本原理和操作技巧，可以使得團隊更加高效地進行工作。&lt;/p&gt;
&lt;h1&gt;在 Windows 實際 demo git client 與 git server該如何進行&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安裝 Git
首先，需要在你的 Windows 上安裝 Git 客戶端。
前往 Git 官方網站下載安裝包，然後按照提示安裝。
安裝完成後，可以通過命令行輸入 git --version 來確認 Git 是否安裝成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 Git
安裝完成後，進行一些基本的配置：
bash
複製程式碼
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安裝 Git Server
在 Windows 上設置一個 Git server，推薦使用 Git for Windows 與 SSH server（例如 OpenSSH）。
安裝 OpenSSH Server
打開“設置” -&amp;gt; “應用” -&amp;gt; “可選功能”。
點擊“添加功能”，找到“OpenSSH Server”，然後安裝。
啟動 OpenSSH Server
打開 PowerShell 以管理員身份運行。
執行以下命令來啟動和設置 OpenSSH Server 開機自動啟動：
powershell
複製程式碼
Start-Service sshd
Set-Service -Name sshd -StartupType 'Automatic'
生成 SSH 密鑰
如果你還沒有 SSH 密鑰，可以通過以下命令生成：
bash
複製程式碼
ssh-keygen -t rsa -b 4096 -C "your.email@example.com"
將生成的公鑰添加到 Git server 的 ~/.ssh/authorized_keys 文件中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創建一個裸倉庫
裸倉庫是一個專門用於作為遠程倉庫的 Git 倉庫。
bash
複製程式碼
mkdir C:\git-server\myrepo.git
cd C:\git-server\myrepo.git
git init --bare&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;設置 SSH 登錄信息
將公鑰拷貝到 Git server 用戶的 ~/.ssh/authorized_keys 中，這樣就可以通過 SSH 訪問該用戶的 Git 倉庫。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;克隆遠程倉庫（Client）
在客戶端，通過 SSH 克隆剛才創建的遠程倉庫：
bash
複製程式碼
git clone ssh://username@hostname/C:/git-server/myrepo.git&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作示範
在本地創建新文件並提交
bash
複製程式碼
cd myrepo
echo "# My Project" &amp;gt; README.md
git add README.md
git commit -m "Initial commit"
git push origin master
在本地拉取更新
bash
複製程式碼
git pull origin master&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顯示結果
在本地文件夾中，你應該可以看到 README.md 文件的存在，並且通過 git log 可以查看提交歷史。
以上步驟展示了如何在 Windows 上設置一個基本的 Git server 和 Git client，並進行簡單的操作。如果有任何問題或需要進一步的幫助，請隨時告訴我！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="w6"></category><category term="網誌編寫"></category></entry><entry><title>2024 W5 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w5-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T05:45:00+08:00</published><updated>2024-06-14T12:44:19+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-06-14:/41223126/wcm2044/blog/2024-Spring-w5-blog-tutorial.html</id><summary type="html">&lt;p&gt;四技 WCM 第五週課程, 以 iframe 嵌入先前的教學影片, 並摘要各影片內容.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;四技 WCM 第五週課程, 以 iframe 嵌入先前的教學影片, 並摘要各影片內容.&lt;/p&gt;


&lt;h1&gt;講解Replit分組平台倉儲設定&lt;/h1&gt;
&lt;p&gt;詳細影片&lt;a href="https://www.youtube.com/watch?v=ep6lDKCU_wo"&gt;影片&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要內容有用.ssh-keygen創建自己的config和id_rsa，刪除重新綁定在replit的倉儲帳號以利重新獲得自己的權限&lt;/p&gt;
&lt;h1&gt;使用可攜檔裡的Putty-solvespace.exe(STL) 零件檢視方法&lt;/h1&gt;
&lt;p&gt;詳細影片&lt;a href="https://www.youtube.com/watch?v=ep6lDKCU_wo"&gt;影片&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;如何使用可攜程式近端，維護更新自己及分組倉儲&lt;/h1&gt;
&lt;p&gt;詳細影片&lt;a href="https://www.youtube.com/watch?v=ep6lDKCU_wo"&gt;影片&lt;/a&gt;&lt;/p&gt;</content><category term="w5"></category><category term="網誌編寫"></category></entry><entry><title>2024 W4 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w4-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T04:45:00+08:00</published><updated>2024-06-14T12:28:31+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-06-14:/41223126/wcm2044/blog/2024-Spring-w4-blog-tutorial.html</id><summary type="html">&lt;p&gt;四技 WCM 第四週課程, 複習前三週的課程內容, 並且介紹 git 與 cmsimde 的相關用法.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;四技 WCM 第四週課程, 複習前三週的課程內容, 並且介紹 git 與 cmsimde 的相關用法.&lt;/p&gt;


&lt;h1&gt;Replit 靜態網站檢視&lt;/h1&gt;
&lt;p&gt;下載 &lt;a href="https://mde.tw/wcm2024/downloads/main2.txt"&gt;main2.txt&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;與 &lt;a href="https://mde.tw/wcm2024/downloads/static.txt"&gt;static.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中包含 main2.py 與 static.py, 只要在 Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視.&lt;/p&gt;</content><category term="w4"></category><category term="網誌編寫"></category></entry><entry><title>2024 W3 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w3-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T03:45:00+08:00</published><updated>2024-06-14T12:17:39+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-06-14:/41223126/wcm2044/blog/2024-Spring-w3-blog-tutorial.html</id><summary type="html">&lt;p&gt;四技 WCM 第三週課程, 除了 Replit, Github Codespaces, Gitpod 之外, 還介紹如何利用可攜系統維護個人與分組網站.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;四技 WCM 第三週課程, 除了 Replit, Github Codespaces, Gitpod 之外, 還介紹如何利用可攜系統維護個人與分組網站.&lt;/p&gt;


&lt;h1&gt;建立分組倉儲&lt;/h1&gt;
&lt;p&gt;利用Codespaces建立分組倉儲建立個人子模組&lt;/p&gt;
&lt;p&gt;另用終端機打出指令&lt;/p&gt;
&lt;p&gt;git status&lt;/p&gt;
&lt;p&gt;ls -l&lt;/p&gt;
&lt;p&gt;clear&lt;/p&gt;
&lt;p&gt;git submodule add 自己倉儲網址.git空格+學號&lt;/p&gt;
&lt;p&gt;git add .&lt;/p&gt;
&lt;p&gt;git commit -m "add 學號 submodule"&lt;/p&gt;
&lt;p&gt;git push&lt;/p&gt;
&lt;p&gt;就可以將自己的個人子模組加入到分組倉儲&lt;/p&gt;
&lt;h1&gt;利用 Github Codespaces 維護倉儲&lt;/h1&gt;
&lt;p&gt;如前所述, 使用 Replit 管理分組網站, 必須採動態建立 .ssh 目錄中的私鑰與 config, 過程比較複雜, 但若採用 Github Codespaces, 則可以在登入 Github 帳號下, 管理該帳號所有授權的倉儲, 包括分組倉儲與網站, 唯一的限制是每個月只能使用 120 core hours, 若以內定的 2 core 執行管理, 則平均每天可以使用兩個小時.&lt;/p&gt;
&lt;h1&gt;WINK&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.debugmode.com/wink.html"&gt;https://www.debugmode.com/wink.html&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;GIT ORDER&lt;/h1&gt;
&lt;p&gt;git add . (新增)&lt;/p&gt;
&lt;p&gt;git commit -m "說明字串"  (提交及名稱)&lt;/p&gt;
&lt;p&gt;git push (推送)&lt;/p&gt;
&lt;p&gt;git version (查詢目前所使用的 git 版本)&lt;/p&gt;
&lt;p&gt;git status (一般是用來檢查目前近端改版情況)&lt;/p&gt;
&lt;p&gt;若在遠端倉儲已經改版了，就必須先git pull，將遠端資訊與自己的合併更新，才能在提交新的版本推送至倉儲。&lt;/p&gt;
&lt;p&gt;git pull=git fetch + git merge&lt;/p&gt;
&lt;p&gt;git submodule add 倉儲網址子目錄&lt;/p&gt;
&lt;p&gt;git clone --recurse-submodules (.git 指定目錄與否)&lt;/p&gt;
&lt;p&gt;token&lt;/p&gt;
&lt;p&gt;git config --global&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下為其他其他指令&lt;/p&gt;
&lt;p&gt;git submodule update --init (抓下子模組)&lt;/p&gt;
&lt;p&gt;git log (檢視 Git 紀錄 Q鍵離開)&lt;/p&gt;
&lt;p&gt;ls -l (瀏覽)&lt;/p&gt;
&lt;p&gt;pwd (列出現在工作目錄)&lt;/p&gt;
&lt;p&gt;acp ("輸入" 直接上傳)&lt;/p&gt;
&lt;p&gt;dns (將英文名稱轉為數字IP 問server(伺服器)IP地址 DNS會先查詢自己資料庫)&lt;/p&gt;
&lt;p&gt;dir (顯示某個磁碟指定目錄下的全部或部分檔案目錄和子目錄)&lt;/p&gt;
&lt;p&gt;./b(代表執行、運行)(執行可執行檔)&lt;/p&gt;</content><category term="w3"></category><category term="網誌編寫"></category></entry><entry><title>2024 W1 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w1.-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T02:45:00+08:00</published><updated>2024-06-14T09:36:54+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-06-14:/41223126/wcm2044/blog/2024-Spring-w1.-blog-tutorial.html</id><summary type="html">&lt;p&gt;四技 WCM 第一週課程, 主要引導學員登入 MS Online 並建立 Github 帳號, 以及利用 cmsimde_site 作為 Template 建立個人課程網站.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;四技 WCM 第一週課程, 主要引導學員登入 MS Online 並建立 Github 帳號, 以及利用 cmsimde_site 作為 Template 建立個人課程網站.&lt;/p&gt;


&lt;h1&gt;登入 MS Online&lt;/h1&gt;
&lt;p&gt;網際內容管理課程學員上課時必須登入 MS Online, 主要目的是能在 MS Teams 中上課, 一邊觀看教學示範, 一邊自行操作.&lt;/p&gt;
&lt;h1&gt;Github 帳號&lt;/h1&gt;
&lt;p&gt;建立 Github 帳號, 主要用來建立並維護個人的課程倉儲與網站.&lt;/p&gt;
&lt;h1&gt;建立個人課程網站&lt;/h1&gt;
&lt;p&gt;網際內容管理的個人課程網站名稱為 wcm2024, 請先登入 Github 後, 連接至 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以此倉儲作為Template建立個人的wcm2024倉儲
個人倉儲個人倉儲成品: &lt;a href="https://github.com/Ren911308/wcm2024"&gt;https://github.com/Ren911308/wcm2024&lt;/a&gt;&lt;/p&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry><entry><title>2024 W2 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w2-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T02:45:00+08:00</published><updated>2024-06-14T12:10:25+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-06-14:/41223126/wcm2044/blog/2024-Spring-w2-blog-tutorial.html</id><summary type="html">&lt;p&gt;四技 WCM 第二週課程, 主要確認各學員是否完成 Github 中個人倉儲與網站的建立, 並且除了 Replit 還導入利用 Github Codespaces 維護個人與分組網站.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;四技 WCM 第二週課程, 主要確認各學員是否完成 Github 中個人倉儲與網站的建立, 並且除了 Replit 還導入利用 Github Codespaces 維護個人與分組網站.&lt;/p&gt;


&lt;h1&gt;確認所有學員都已經建立個人網站&lt;/h1&gt;
&lt;p&gt;建立個人課程網站步驟:&lt;/p&gt;
&lt;p&gt;登入 Github
連結到 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;利用 "Use this template" 下方的 "Create a new repository" 建立名稱為 wcm2024 的倉儲
在 wcm2024 倉儲上方的 Settings 設定頁面中, 左方 Pages 中的 Branch 分支區域, 選擇將 main 分支存為網頁的 root 根目錄
等 wcm2024 的倉儲 Github Pages 轉檔完成後, 可以看到 commits 提交區的綠色勾勾, 就完成網址為 https://帳號.github.io/wcm2024 的個人課程網站
利用上述步驟完成的倉儲內容, 同時帶有以 Python 編寫的動態網站程式, 以及位於 content 目錄中的靜態網頁資料.
完成品: &lt;a href="https://ren911308.github.io/wcm2024/content"&gt;https://ren911308.github.io/wcm2024/content&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;確認學員已經會利用 Replit 維護網站&lt;/h1&gt;
&lt;p&gt;利用 init_replit 指令安裝所需 Python 模組&lt;/p&gt;
&lt;p&gt;chmod u+x init_replit&lt;/p&gt;
&lt;p&gt;./init_replit&lt;/p&gt;
&lt;p&gt;On Replit
啟動動態編輯網站&lt;/p&gt;
&lt;h1&gt;如何利用 Codespaces 維護網站&lt;/h1&gt;
&lt;p&gt;利用 init_replit 指令安裝所需 Python 模組&lt;/p&gt;
&lt;p&gt;chmod u+x init_replit&lt;/p&gt;
&lt;p&gt;./init_replit&lt;/p&gt;
&lt;p&gt;On Replit:&lt;/p&gt;
&lt;p&gt;之後還需以python3 main.py執行啟動動態編輯網站&lt;/p&gt;</content><category term="w2"></category><category term="網誌編寫"></category></entry><entry><title>2024 Spring 課程</title><link href="https://github.io/41223126/wcm2044/blog/2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-14T06:34:53+08:00</updated><author><name>kmol</name></author><id>tag:github.io,2024-02-18:/41223126/wcm2044/blog/2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry></feed>